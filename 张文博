——存储与输出部分设计——
1，建立四个函数，memoryscore()实现姓名的输入，建立文件存储用户信息，ranking_list()输出排行榜，MemoryArchiving()，建立文件存档，ReadArchiving()，实现游戏的继续进行。
2，用户的成绩与姓名存储在file.txt文件中，用户的游戏存档存储在archiving.txt文件中。
3，将用户的姓名与成绩设置为一个结构数组，
struct person{
	char name[20];
	int score;
	char string[32];
};其中string是用来承载数字转字符串以实现输出成绩。

——游戏需求分析——
1，需要建立两个文件并能进行存储与读取。
2，需要能将排行榜成绩有序输出。
3，需要存储游戏存档保存界面的所有信息。
4，需要看到排行榜后能有途径返回主界面。
5，需要实现游戏结束后姓名的输入。

——对应设计——
1，功能模块设计：
存储功能部分，运用文件的添加将全局变量信息添加进文件。
排序功能部分，运用指针对结构数组进行排序，从而改变结构数组的顺序。
输出功能部分，对于排行榜，先在接口处设置清屏函数，然后进行绘制信息，并绘制“返回”按钮，对于存档的读取，在读取信息之后改变mainstate，然后编写startgame（）函数实现继续游戏。
2，数据结构设计：
  1，定义结构数组struct person{
	char name[20];
	int score;
	char string[32];
        }用来存储信息。
  2，定义全局变量num，用于进入一次游戏时用户信息的存储。
3，函数功能描述
********************************************************************
函数原型：void memoryscore();
功能描述：绘制输入姓名界面，创建文件并存储用户信息成绩与用户名
参数描述：无；
返回值描述：无
重要局部变量定义：无
重要局部变量用途描述：无
函数算法描述：用textbox绘制用户名的输入，然后用确定按钮返回主界面并建立文件存储姓名与分数。
********************************************************************
函数原型：void ranking_list()
功能描述：绘制排行榜，输出用户名与成绩，并绘制返回按钮
参数描述：无
返回值描述：无
重要局部变量定义：int j=0,k.
重要局部变量用途描述：j用来记录用户人数，k用来循环输出。
函数算法描述：运用fscanf读取文件中的信息，运用drawLabel绘制用户名与成绩，再用sprintf用于数字转字符串。
***********************************************************
函数原型：void rankscore(struct person *p,int n)
功能描述：对用户的成绩进行排行榜排序
参数描述：struct person *p是用户信息的指针，int n是ranking_list()中的局部变量k记录的人数。
返回值描述：无
重要局部变量定义：int k,j
重要局部变量用途描述：进行排序。
函数算法描述：运用冒泡排序法进行排序，并运用指针直接改变。
************************************************************
函数原型：bool MemoryArchiving()
功能描述：记录游戏数据进行存档。
参数描述：无
返回值描述：0是存档失败，1是存档成功
重要局部变量定义：Int i,j
重要局部变量用途描述：循环存储数组block[12][22]
函数算法描述：依然是运用文件进行游戏数据的存储。
************************************************************
函数原型：void ReadArchiving()
功能描述：读取游戏数据，并进行输出。
参数描述：无
返回值描述：无
重要局部变量定义：int i,j
重要局部变量用途描述：循环对数组数据进行复制。
函数算法描述：利用文件的读取进行游戏数据的重现。再改变mainstate从而进行游戏的继续进行,绘制游戏界面并startgame（）。 

——总结——
  在编写文件读取存档的方面，自身的编程能力有限，还存在很多的问题，很多内容都是重新学习的感觉，所以编写程序用了比较久的时间，并且在用户信息的统计时没有用到链表，而是使用了结构数组，这也可能会导致我们的程序有部分的缺陷，而且在排行榜的输出上也存在一些问题，但还是
  努力地完成了，总的来说还是实现了大部分所需要的功能。

个人遇到的困难：
1，对于文件的读取，以及存储不是很了解，对于其运用更是从头学起。  解决方案：看书，百度，以及运用dev试写程序来检验。
2，对于成绩的输入，开始会出现乱码或输入不了的问题。             解决方案：提前对存储姓名的字符串定义，之后在输入的时候只是改动这个字符串。
3，在读取存档重新开始游戏时开始的设想的接口或是仅仅画了一遍或是直接重新开始游戏。   解决方案：模仿游戏主函数建立startgame函数。

应用的知识点：
运用了文件的建立，添加与读取。排序法。
亮点：
游戏的存档的读取能很好地执行。






