——————游戏本体部分设计——————
游戏部分的主函数接口暂定为MAINGAME();
游戏过程中的所有格子的状态保存在一个二维数组int block[][]里以左下角为[0][0]点
block设置为全局变量方便读取和保存存档
block的不同的值表示不同的颜色
定义一个全局变量isgame；游戏刷新以isgame=1为条件，当isgame的值为0时代表游戏终止，2表示暂停状态
另外还有全局变量newblock indexx indexy indexa indexb ms score fuzhu 具体作用见程序注释
——————游戏需求分析——————
需要储存所有方块的状态
需要一个指示符来代表期中方块每种最多的四个形态
需要随机生成下一个方块并显示在预备区
需要实现整个方块的移动和旋转
需要检测方块是否碰撞
需要消除已满的行（有时会多行同时消除）
需要加速 减速 开始 暂停 计分功能
——————对应设计——————
1.功能模块设计
  预处理部分，定义计时器TIMER 定义xiangsu，用于在绘制方块时代表每个方块的边长
  初始化部分，初始化数组的值，使得最外围的block值为-10，代表最外围的游戏框。利用srand函数获取时间种子，
  随机生成1~7的数值，对应七种方块的a类型
  方块操作部分，判断目标位置能否放置当前活动类型方块，如果是，清除原先位置的活动方块，在目标位置绘制改活动方块。否则不进行操作。
  方块冻结部分，判断当前活动方块是否已经触底，如果是，将当前活动方块冻结为不活动方块，进入下一个活动方块的处理进程。否则继续当前活动方块的处理进程
  方块消除部分，通过从下往上一层层遍历数组，每检测到一行全不为空，即将该行上的每一行依次下移一行，重复循环，直到最后一行判定完成。
  图形化绘制部分，将数组形式下的盘面整个绘制到图形界面上，同时绘制预备区的方块
  键盘功能部分，不同的键盘响应不同的方块操作的组合
  计时器循环部分，利用刷新间隔控制游戏难度，当当前活动方块未落地时将方块自动下移，当方块落地后进行新活动方块的处理进程，即：
               冻结当前活动方块，将预备区的方块绘制到游戏区顶部，使其成为新的活动方块，在这之前需要判定，如果顶部已经绘制不下，
               则游戏状态变为终止。
  外部功能部分，提供开始 暂停 加速 减速的函数接口对应界面设计的按钮功能。
2.数据结构设计
  int block[12][22];//全局变量初始化为0，代表空白，+-1，+-2，+-3，+-4，+-5，+-6，+-7，代表不同颜色，-10代表黑色，即游戏框
  int newblock;//用于存储下一个方块的a类型，1，2，3，4，5，6，7代表不同类型
  int indexx,indexy;//用于指示当前活动方块的中心格坐标，便于方块操作
  int indexa,indexb;//指示当前活动方块的a，b类型，a类型代表方块形状，b类型代表方块方向
  int ms;//储存计时器刷新间隔
  int score;//储存分数
  int isgame=0;//0表示终止，1表示进行中，2表示暂停 
  int fuzhu=0;//这是一个辅助判断消除的变量，用于blockdecline中连续消除第一行的情况
3.函数功能描述
   函数原型：void prefunction();
   功能描述；
   参数描述： 
   返回值描述：
   重要局部变量定义：
   重要局部变量用途描述：
   函数算法描述：
   
   函数原型：
   功能描述；
   参数描述： 
   返回值描述：
   重要局部变量定义：
   重要局部变量用途描述：
   函数算法描述：

  
